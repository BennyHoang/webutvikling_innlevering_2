#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NyheterApp.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AuthorDB")]
	public partial class NyhetOrmDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertForfatter(Forfatter instance);
    partial void UpdateForfatter(Forfatter instance);
    partial void DeleteForfatter(Forfatter instance);
    partial void InsertNyhet(Nyhet instance);
    partial void UpdateNyhet(Nyhet instance);
    partial void DeleteNyhet(Nyhet instance);
    #endregion
		
		public NyhetOrmDbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AuthorDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NyhetOrmDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NyhetOrmDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NyhetOrmDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NyhetOrmDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Forfatter> Forfatters
		{
			get
			{
				return this.GetTable<Forfatter>();
			}
		}
		
		public System.Data.Linq.Table<Nyhet> Nyhets
		{
			get
			{
				return this.GetTable<Nyhet>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Forfatter")]
	public partial class Forfatter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Fornavn;
		
		private string _Etternavn;
		
		private string _Mobil;
		
		private string _Brukernavn;
		
		private string _Passord;
		
		private EntitySet<Nyhet> _Nyhets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFornavnChanging(string value);
    partial void OnFornavnChanged();
    partial void OnEtternavnChanging(string value);
    partial void OnEtternavnChanged();
    partial void OnMobilChanging(string value);
    partial void OnMobilChanged();
    partial void OnBrukernavnChanging(string value);
    partial void OnBrukernavnChanged();
    partial void OnPassordChanging(string value);
    partial void OnPassordChanged();
    #endregion
		
		public Forfatter()
		{
			this._Nyhets = new EntitySet<Nyhet>(new Action<Nyhet>(this.attach_Nyhets), new Action<Nyhet>(this.detach_Nyhets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fornavn", DbType="NVarChar(50)")]
		public string Fornavn
		{
			get
			{
				return this._Fornavn;
			}
			set
			{
				if ((this._Fornavn != value))
				{
					this.OnFornavnChanging(value);
					this.SendPropertyChanging();
					this._Fornavn = value;
					this.SendPropertyChanged("Fornavn");
					this.OnFornavnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Etternavn", DbType="NVarChar(50)")]
		public string Etternavn
		{
			get
			{
				return this._Etternavn;
			}
			set
			{
				if ((this._Etternavn != value))
				{
					this.OnEtternavnChanging(value);
					this.SendPropertyChanging();
					this._Etternavn = value;
					this.SendPropertyChanged("Etternavn");
					this.OnEtternavnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobil", DbType="NChar(10)")]
		public string Mobil
		{
			get
			{
				return this._Mobil;
			}
			set
			{
				if ((this._Mobil != value))
				{
					this.OnMobilChanging(value);
					this.SendPropertyChanging();
					this._Mobil = value;
					this.SendPropertyChanged("Mobil");
					this.OnMobilChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brukernavn", DbType="NVarChar(50)")]
		public string Brukernavn
		{
			get
			{
				return this._Brukernavn;
			}
			set
			{
				if ((this._Brukernavn != value))
				{
					this.OnBrukernavnChanging(value);
					this.SendPropertyChanging();
					this._Brukernavn = value;
					this.SendPropertyChanged("Brukernavn");
					this.OnBrukernavnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passord", DbType="NVarChar(50)")]
		public string Passord
		{
			get
			{
				return this._Passord;
			}
			set
			{
				if ((this._Passord != value))
				{
					this.OnPassordChanging(value);
					this.SendPropertyChanging();
					this._Passord = value;
					this.SendPropertyChanged("Passord");
					this.OnPassordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forfatter_Nyhet", Storage="_Nyhets", ThisKey="Id", OtherKey="ForfatterId")]
		public EntitySet<Nyhet> Nyhets
		{
			get
			{
				return this._Nyhets;
			}
			set
			{
				this._Nyhets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nyhets(Nyhet entity)
		{
			this.SendPropertyChanging();
			entity.Forfatter = this;
		}
		
		private void detach_Nyhets(Nyhet entity)
		{
			this.SendPropertyChanging();
			entity.Forfatter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nyhet")]
	public partial class Nyhet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Tittel;
		
		private string _Tekst;
		
		private System.Nullable<System.DateTime> _DatoPostet;
		
		private string _BildeSrc;
		
		private System.Nullable<int> _ForfatterId;
		
		private EntityRef<Forfatter> _Forfatter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTittelChanging(string value);
    partial void OnTittelChanged();
    partial void OnTekstChanging(string value);
    partial void OnTekstChanged();
    partial void OnDatoPostetChanging(System.Nullable<System.DateTime> value);
    partial void OnDatoPostetChanged();
    partial void OnBildeSrcChanging(string value);
    partial void OnBildeSrcChanged();
    partial void OnForfatterIdChanging(System.Nullable<int> value);
    partial void OnForfatterIdChanged();
    #endregion
		
		public Nyhet()
		{
			this._Forfatter = default(EntityRef<Forfatter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tittel", DbType="NVarChar(50)")]
		public string Tittel
		{
			get
			{
				return this._Tittel;
			}
			set
			{
				if ((this._Tittel != value))
				{
					this.OnTittelChanging(value);
					this.SendPropertyChanging();
					this._Tittel = value;
					this.SendPropertyChanged("Tittel");
					this.OnTittelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tekst", DbType="NVarChar(MAX)")]
		public string Tekst
		{
			get
			{
				return this._Tekst;
			}
			set
			{
				if ((this._Tekst != value))
				{
					this.OnTekstChanging(value);
					this.SendPropertyChanging();
					this._Tekst = value;
					this.SendPropertyChanged("Tekst");
					this.OnTekstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatoPostet", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatoPostet
		{
			get
			{
				return this._DatoPostet;
			}
			set
			{
				if ((this._DatoPostet != value))
				{
					this.OnDatoPostetChanging(value);
					this.SendPropertyChanging();
					this._DatoPostet = value;
					this.SendPropertyChanged("DatoPostet");
					this.OnDatoPostetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BildeSrc", DbType="NVarChar(50)")]
		public string BildeSrc
		{
			get
			{
				return this._BildeSrc;
			}
			set
			{
				if ((this._BildeSrc != value))
				{
					this.OnBildeSrcChanging(value);
					this.SendPropertyChanging();
					this._BildeSrc = value;
					this.SendPropertyChanged("BildeSrc");
					this.OnBildeSrcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForfatterId", DbType="Int")]
		public System.Nullable<int> ForfatterId
		{
			get
			{
				return this._ForfatterId;
			}
			set
			{
				if ((this._ForfatterId != value))
				{
					if (this._Forfatter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForfatterIdChanging(value);
					this.SendPropertyChanging();
					this._ForfatterId = value;
					this.SendPropertyChanged("ForfatterId");
					this.OnForfatterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forfatter_Nyhet", Storage="_Forfatter", ThisKey="ForfatterId", OtherKey="Id", IsForeignKey=true)]
		public Forfatter Forfatter
		{
			get
			{
				return this._Forfatter.Entity;
			}
			set
			{
				Forfatter previousValue = this._Forfatter.Entity;
				if (((previousValue != value) 
							|| (this._Forfatter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forfatter.Entity = null;
						previousValue.Nyhets.Remove(this);
					}
					this._Forfatter.Entity = value;
					if ((value != null))
					{
						value.Nyhets.Add(this);
						this._ForfatterId = value.Id;
					}
					else
					{
						this._ForfatterId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Forfatter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
